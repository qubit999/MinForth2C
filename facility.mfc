\ ============================================================================
\  MINFORTH V34 FACILITY WORDSET DEFINITIONS
\ ============================================================================
\ provided "as is" as per the license conditions stated in file mflicense.txt 

#INCLUDE core.mfc
#INCLUDE file.mfc
C
C #define MFFACILITY

\ ------ Timing --------------------------------------------------------------

: (TIMER)  \ ( -- u ) MF milliseconds passed since system start
C  mferr(mfout(1));
C  mfpush((1000*clock())/CLOCKS_PER_SEC); ;

: MS  \ ( u -- ) 10.6.2.1905 wait u milliseconds
C  mferr(mfin(1));
C #if defined _WIN32
C  Sleep(mfpop());
C #elif defined __linux__
C  usleep(1000*mfpop());
C #else // DOS
   (timer) + BEGIN dup (timer) u< UNTIL drop
C #endif
   ; 

VARIABLE _TIMER  \ MF system ms at timer start
VARIABLE __TMFL  \ MF timer running flag

: TIMER-RESET  \ ( -- ) MF store actual ticker
   __tmfl on (timer) _timer ! ;

: TIMER-STOP  \ ( -- ) MF calculate and store ticker difference
   __tmfl off (timer) _timer @ - _timer ! ;

: .ELAPSED  \ ( -- ) MF show ticker difference
   __tmfl @ IF timer-stop THEN _timer @ . ." ms" ;

: RANDOM  \ ( -- n ) MF get pseudo random number (cell-wide)
C  mferr(mfout(1));
C  mfCell r=0; if (!r) srand(time(NULL));
C  for (int i=0;i<MFSIZE;i++) r=(r<<8)^rand();
C  mfpush(r); ;

\ ------ Date functions ------------------------------------------------------

: TIME&DATE  \ ( -- sc mn hr dy mo yr ) 10.6.2.2292 get current time and date
C  mferr(mfout(6));
C  struct tm *ts; time_t t;
C  time(&t), ts=localtime(&t);
C  mfpush(ts->tm_sec),  mfpush(ts->tm_min),   mfpush(ts->tm_hour);
C  mfpush(ts->tm_mday), mfpush(1+ts->tm_mon), mfpush(1900+ts->tm_year); ;

: WEEKDAY  \ ( -- n ) MF weekday number 0(sun)..6(sat)
C  mferr(mfout(1));
C  struct tm *ts; time_t t;
C  time(&t), ts=localtime(&t);   
C  mfpush(ts->tm_wday); ;

: DAYLIGHTSAVING  \ ( -- f ) MF daylight saving flag (0/1:un/used -1:unknown)
C  mferr(mfout(1));
C  struct tm *ts; time_t t;
C  time(&t), ts=localtime(&t);   
C  mfpush(ts->tm_isdst); ;

: _TIME$  \ ( -- a u ) MF build time string in hh:mm:ss format
   time&date 2drop drop
   rot 0 <# # # ':' hold 2drop swap 0 # # ':' hold 2drop 0 # # #> ;

: _WEEKDAY$  \ ( -- a u ) MF build weekday string
  s" SunMonTueWedThuFriSat" drop weekday 3 * + 3 ;

: _MONTH$  \ ( -- a u ) MF build month string
  time&date drop >r 2drop 2drop s" JanFebMarAprMayJunJulAugSepOctNovDec" 
  drop r> 1- 3 * + 3 ;

: _DATE$  \ ( -- a u ) MF build date string in dd:mm:yyyy format
   time&date
   0 <# # # # # '.' hold 2drop 0 # # '.' hold 2drop 0 # # #>
   2>r 2drop drop 2r> ;

\ ------ Data Structures ----------------------------------------------------- 
   
: BEGIN-STRUCTURE  \ ( 'name -- ) 10.6.2.0763 define named structure
   create here 0 0 , ['] @ _<does ;

: END-STRUCTURE \ ( -- ) 10.6.2.1336 terminate structure definition
   swap ! ;

: _+FIELD  \ MF +FIELD runtime
   @ + ;
   
: +FIELD   \ ( n1 l 'name -- n2 ) 10.6.2.0135 advance by length l for name
   create over , + ['] _+field _<does ;
   
: CFIELD:   \ ( n1 'name  -- n2 ) 10.6.2.0893 create structure char element
   1 +field ;
   
: FIELD:  \ ( n1 'name  -- n2 ) 10.6.2.1518 create structure cell element
   aligned cell +field ;

\ ------ Keyboard support ----------------------------------------------------

: EKEY?  \ ( -- fl ) 10.6.2.1307 check for cooked key
C  mferr(mfout(1));
C  mfpush(mfkeyq()); ;

: EKEY  \ ( -- ck ) MF fetch cooked key from keyboard
C  uint32_t c=mfkey();
C #ifdef __linux__ 
C  if (c==27) { // goodenuffhash
C    while (mfkeyq()) c = (c<<6)^(mfChar)(mfkey()-32); }
C #else
C  if ((c==0)||(c==0xe0)) c |= mfkey()<<8;
C #endif
C  mfpush(c); ;

: EKEY>FKEY  \ ( x - u fl ) 10.6.2.1306.40 return key id of keyboard event
C  mferr(mfin(1);mfout(1));
C #if defined _WIN32
C  static const uint16_t ktab[]={ // scan codes
C // norm, shift,  ctrl,   alt
C  0x3b00,0x5400,0x5e00,0x6800, // F1
C  0x3c00,0x5500,0x5f00,0x6900, // F2
C  0x3d00,0x5600,0x6000,0x6a00, // F3
C  0x3e00,0x5700,0x6100,0x6b00, // F4
C  0x3f00,0x5800,0x6200,0x6c00, // F5
C  0x4000,0x5900,0x6300,0x6d00, // F6
C  0x4100,0x5a00,0x6400,0x6e00, // F7
C  0x4200,0x5b00,0x6500,0x6f00, // F8
C  0x4300,0x5c00,0x6600,0x7000, // F9
C  0x4400,0x5d00,0x6700,0x7100, // F10
C  0x47e0,0x47e0,0x77e0,0x9700, // home
C  0x48e0,0x48e0,0x8de0,0x9800, // up
C  0x49e0,0x49e0,0x86e0,0x9900, // prior/pgup
C  0x4be0,0x4be0,0x73e0,0x9b00, // left
C  0x4de0,0x4de0,0x74e0,0x9d00, // right
C  0x4fe0,0x4fe0,0x75e0,0x9f00, // end
C  0x50e0,0x50e0,0x91e0,0xa000, // down
C  0x51e0,0x51e0,0x76e0,0xa100, // next/pgdn
C  0x52e0,0x52e0,0x92e0,0xa200, // ins
C  0x53e0,0x53e0,0x93e0,0xa300, // del
C  0x85e0,0x87e0,0x89e0,0x8be0, // F11
C  0x86e0,0x88e0,0x8ae0,0x8ce0}; // F12
C #elif defined __linux__
C  static const uint32_t ktab[]={
C // norm,      shift,     ctrl,      alt
C  0x0001bbf0,0xfb45b4b0,0xfb45b570,0xfb45b4f0, // F1
C  0x0001bbf1,0xfb45b4b1,0xfb45b571,0xfb45b4f1, // F2
C  0x0001bbf2,0xfb45b4b2,0xfb45b572,0xfb45b4f2, // F3
C  0x0001bbf3,0xfb45b4b3,0xfb45b572,0xfb45b4f3, // F4
C  0x1bed151e,0xd155b4de,0xd155b51e,0xd155b49e, // F5
C  0x1bed159e,0xd15db4de,0xd15db51e,0xd15db49e, // F6
C  0x1bed165e,0xd161b4de,0xd161b51e,0xd161b49e, // F7
C  0x1bed161e,0xd165b4de,0xd165b51e,0xd165b49e, // F8
C  0x1bed245e,0xd241b4de,0xd241b51e,0xd241b49e, // F9
C  0x1bed241e,0xd245b4de,0xd245b51e,0xd245b49e, // F10
C  0x0001bee8,0xfb45b4a8,0xfb45b568,0xfb45b4e8, // home
C  0x0001bee1,0xfb45b4a1,0xfb45b561,0xfb45b4e1, // up
C  0x006fb51e,0xfb45b4a8,0xfb55b51e,0xfb55b49e, // prior/pgup
C  0x0001bee4,0xfb45b4a4,0xfb45b564,0xfb45b4e4, // left
C  0x0001bee3,0xfb45b4a3,0xfb45b563,0xfb45b4e3, // right
C  0x0001bee6,0xfb45b4a6,0xfb45b566,0xfb45b4e6, // end
C  0x0001bee2,0xfb45b4a2,0xfb45b562,0xfb45b4e2, // down
C  0x006fb5de,0xfb59b4de,0xfb59b51e,0xfb59b49e, // next/pgdn
C  0x006fb4de,0xfb49b4de,0xfb49b51e,0xfb49b49e, // ins
C  0x006fb49e,0xfb4db4de,0xfb4db51e,0xfb4db49e, // del
C  0x1bed249e,0xd24db4de,0xd24db51e,0xd24db49e, // F11
C  0x1bed255e,0xd251b4de,0xd251b51e,0xd251b49e}; // F12
C #else // DOS
C  static const uint16_t ktab[]={ // scan codes (depending on machine!)
C // norm, shift,  ctrl,   alt
C  0x3b00,0x5400,0x5e00,0x6800, // F1
C  0x3c00,0x5500,0x5f00,0x6900, // F2
C  0x3d00,0x5600,0x6000,0x6a00, // F3
C  0x3e00,0x5700,0x6100,0x6b00, // F4
C  0x3f00,0x5800,0x6200,0x6c00, // F5
C  0x4000,0x5900,0x6300,0x6d00, // F6
C  0x4100,0x5a00,0x6400,0x6e00, // F7
C  0x4200,0x5b00,0x6500,0x6f00, // F8
C  0x4300,0x5c00,0x6600,0x7000, // F9
C  0x4400,0x5d00,0x6700,0x7100, // F10
C  0x4700,0x4700,0x7700,0x9700, // home
C  0x4800,0x4800,0x8d00,0x9800, // up
C  0x4900,0x4900,0x8600,0x9900, // prior/pgup
C  0x4b00,0x4b00,0x7300,0x9b00, // left
C  0x4d00,0x4d00,0x7460,0x9d00, // right
C  0x4f00,0x4f00,0x7500,0x9f00, // end
C  0x5000,0x5000,0x9100,0xa000, // down
C  0x5100,0x5100,0x7600,0xa100, // next/pgdn
C  0x5200,0x5200,0x9200,0xa200, // ins
C  0x5300,0x5300,0x9300,0xa300, // del
C  0x8500,0x8700,0x8900,0x8b00, // F11
C  0x8600,0x8800,0x8a00,0x8c00}; // F12
C #endif
C  mfCell i,row,col,x=mftos;   
C  for (i=0;i<88;i++) {
C    if (x==ktab[i]) { row=i/4, col=i-row*4;
C      mftos=((row+1)<<8)|(0x10000*col);
C      mfpush(-1); return; } }
C  mfpush(0); ;

0x10000 CONSTANT K-SHIFT-MASK  \ ( -- u ) 10.6.2.1740.24
0x20000 CONSTANT K-CTRL-MASK   \ ( -- u ) 10.6.2.1740.02
0x30000 CONSTANT K-ALT-MASK    \ ( -- u ) 10.6.2.1740.01

0x0100 CONSTANT K-F1     \ ( -- u ) 10.6.2.1740.06
0x0200 CONSTANT K-F2     \ ( -- u ) 10.6.2.1740.10
0x0300 CONSTANT K-F3     \ ( -- u ) 10.6.2.1740.11
0x0400 CONSTANT K-F4     \ ( -- u ) 10.6.2.1740.12
0x0500 CONSTANT K-F5     \ ( -- u ) 10.6.2.1740.13
0x0600 CONSTANT K-F6     \ ( -- u ) 10.6.2.1740.14
0x0700 CONSTANT K-F7     \ ( -- u ) 10.6.2.1740.15
0x0800 CONSTANT K-F8     \ ( -- u ) 10.6.2.1740.16
0x0900 CONSTANT K-F9     \ ( -- u ) 10.6.2.1740.17
0x0A00 CONSTANT K-F10    \ ( -- u ) 10.6.2.1740.07
0x0B00 CONSTANT K-HOME   \ ( -- u ) 10.6.2.1740.08
0x0C00 CONSTANT K-UP     \ ( -- u ) 10.6.2.1740.09
0x0D00 CONSTANT K-PRIOR  \ ( -- u ) 10.6.2.1740.20
0x0E00 CONSTANT K-LEFT   \ ( -- u ) 10.6.2.1740.23
0x0F00 CONSTANT K-RIGHT  \ ( -- u ) 10.6.2.1740.25
0x1000 CONSTANT K-END    \ ( -- u ) 10.6.2.1740.04
0x1100 CONSTANT K-DOWN   \ ( -- u ) 10.6.2.1740.19
0x1200 CONSTANT K-NEXT   \ ( -- u ) 10.6.2.1740.03 
0x1300 CONSTANT K-INSERT \ ( -- u ) 10.6.2.1740.22
0x1400 CONSTANT K-DELETE \ ( -- u ) 10.6.2.1740.21
0x1500 CONSTANT K-F11    \ ( -- u ) 10.6.2.1740.18
0x1600 CONSTANT K-F12    \ ( -- u ) 10.6.2.1740.05

: EKEY>CHAR  \ ( x -- x f | c t ) 10.6.2.1306 check for standard character
   dup 32 127 within ; \ ASCII char set

: EKEY>ECHAR  \ ( x -- x f | c t ) MF check for extended character
   dup 1 256 within over $E0 <> and ; \ Windows char set <255

VARIABLE __PKEY  \ pending key

: KEY?  \ ( -- f ) 10.6.1.1755 check for pending character, discard others
   BEGIN __pkey @ IF true BREAK THEN ekey? ~IF false BREAK THEN
     ekey ekey>char IF __pkey ! ELSE drop THEN
   AGAIN ;

: __FCKEY  \ ( -- c ) MF standard keyboard entry function
   __pkey @ ?dup IF __pkey off EXIT THEN
   BEGIN ekey ekey>char IF BREAK THEN drop
   AGAIN ;
IS KEY

: EMIT?  \ ( -- f ) 10.6.2.1325 check if output terminal is ready
C  mferr(mfout(1));
C  mfpush(mfemitq); ;

\ ------ Virtual Terminal ----------------------------------------------------

-1 VARIABLE VT  \ MF Virtual/ANSI terminal enabled flag

: __VTSET  \ ( n..1 a u -- ) MF set VT through string (^=ESC[, ~=number)
   base @ >r decimal 1 FOR> n c@
     dup '^' = IF drop 27 emit '[' emit ELSE
     dup '~' = IF drop 0 .r ELSE
     emit THEN THEN
   NEXT r> base ! ;

: __VTCHAR  \ ( n -- ) MF set terminal character attribute
   vt @ IF s" ^~m" __vtset ELSE drop THEN ;

: VTNORMAL     0 __vtchar ;  \ ( -- ) MF
: VTBRIGHT     1 __vtchar ;  \ ( -- ) MF
: VTUNDERLINE  4 __vtchar ;  \ ( -- ) MF
: VTREVERSE    7 __vtchar ;  \ ( -- ) MF
: VTHIDDEN     8 __vtchar ;  \ ( -- ) MF

: VTBLACK      30 __vtchar ;  \ ( -- ) MF
: VTRED        31 __vtchar ;  \ ( -- ) MF
: VTGREEN      32 __vtchar ;  \ ( -- ) MF
: VTYELLOW     33 __vtchar ;  \ ( -- ) MF
: VTBLUE       34 __vtchar ;  \ ( -- ) MF
: VTMAGENTA    35 __vtchar ;  \ ( -- ) MF
: VTCYAN       36 __vtchar ;  \ ( -- ) MF
: VTWHITE      37 __vtchar ;  \ ( -- ) MF

: PAGE  \ ( -- ) 10.6.1.2005 clear terminal screen
   vt @ ~IF -21 throw THEN s" ^2J^H" __vtset ;

: AT-XY  \ ( col row -- ) 10.6.1.0742 set text cursor coordinates
   vt @ ~IF -21 throw THEN 1+ swap 1+ swap s" ^~;~f" __vtset ;

: GET-XY  \ ( -- col row ) MF get text cursor coordinates
   vt @ ~IF -21 THROW THEN    
C #if defined _WIN32
C  CONSOLE_SCREEN_BUFFER_INFO csbi; COORD cp; SMALL_RECT wp;
C  GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE),&csbi);
C  wp=csbi.srWindow, cp=csbi.dwCursorPosition;
C  mfpush(cp.X), mfpush(cp.Y-wp.Top);
C #else
   0 0 
C #endif
   ; 

: SAVE-XY  \ ( -- ) MF save cursor coordinates in memory
   vt @ IF ." \033[s" THEN ;

: RESTORE-XY  \ ( -- ) MF restore cursor coordinates from memory
   vt @ IF ." \033[u" THEN ;
   
: VTERASE  \ ( -- ) MF erase rest of line including cursor position
   vt @ IF ." \033[K" THEN ;

: VTUP     vt @ IF s" ^~A" __vtset THEN ;  \ ( n -- ) MF
: VTDOWN   vt @ IF s" ^~B" __vtset THEN ;  \ ( n -- ) MF
: VTRIGHT  vt @ IF s" ^~C" __vtset THEN ;  \ ( n -- ) MF
: VTLEFT   vt @ IF s" ^~D" __vtset THEN ;  \ ( n -- ) MF

\ ------ Simple formatted printing -------------------------------------------

: PRINTF  \ ( n.. a u -- ) MF type formatted string
   BEGIN dup
   WHILE over c@ -rot char/ 2>r dup '%' =  \ numeric output
     IF 2r@ IF c@ 
         CASE
	 	 'd' OF drop 0 .r 0 ENDOF  \ normal
	 	 'u' OF drop 0 u.r 0 ENDOF  \ unsigned normal
	 	 'x' OF drop base @ >r hex 0 .r r> base ! 0 ENDOF \ hex
		 'y' OF drop base @ >r hex 0 u.r r> base ! 0 ENDOF \ unsigned hex
#IFDEF D.
		 'D' OF drop 0 d.r 0 ENDOF \ hook for doubles
#ENDIF
#IFDEF F.
		 'f' OF drop _f. 0 ENDOF \ hook for floats
#ENDIF
		 ENDCASE
		 IF '%' emit ELSE 2r> char/ CONTINUE THEN ELSE drop THEN 
	 ELSE dup '~' =  \ terminal control
       IF 2r@ IF c@
		   CASE 
		   'k' OF drop vtblack 0 ENDOF
		   'r' OF drop vtred 0 ENDOF
		   'g' OF drop vtgreen 0 ENDOF
		   'y' OF drop vtyellow 0 ENDOF
		   'b' OF drop vtblue 0 ENDOF
		   'm' OF drop vtmagenta 0 ENDOF
		   'c' OF drop vtcyan 0 ENDOF
		   'w' OF drop vtwhite 0 ENDOF	   
		   'n' OF drop vtnormal 0 ENDOF
		   't' OF drop vtbright 0 ENDOF
		   'u' OF drop vtunderline 0 ENDOF
		   'v' OF drop vtreverse 0 ENDOF
		   ENDCASE
		   IF '~' emit ELSE 2r> char/ CONTINUE THEN ELSE drop THEN 
	   ELSE emit THEN
	 THEN 2r> 
   REPEAT 2drop ;

: P"  \ ( string" -- ) MF print formatted parsed string
   '"' _parse-char state @
   IF [,] sliteral [,] printf ELSE printf THEN ; IMMEDIATE

\ ------ Command Line Editor with History ------------------------------------
\ history saved to file mfhist.blk when file.mfc is included

1024 BUFFER: __K-HIST  \ TIB history buffer for 8 entries of 2 block lines
8  VARIABLE  __K-I     \ history buffer index (0..7)
   VARIABLE  __K-UPD    \ update flag

: __K-LAST  \ ( -- adr ) last history buffer line
    __k-hist 896 + ;

: __K-ACT  \ ( -- adr ) actual history buffer line address
    __k-hist __k-i @ 128 * + ;

: __K-RESET  \ ( r: a u d: ur i -- r: a u d: 0 ) set input buffer to start  
   ?dup IF vtleft THEN ?dup IF dup spaces vtleft THEN 0 __k-upd off ;

: __K-GET  \ ( r: a u d: ur i -- r: a u d: uh uh ) copy input from history
    __k-act count r@ min 1 rpick swap move __k-reset drop
    __k-act count tuck type dup ;

: __K-INSDEL  \ factoring
   2dup - dup >r 2 rpick pluck + dup >r dup 1+ __k-upd on ;

: __K-INSERT  ( r: a u | ur i k )
   -rot __k-insdel rot move rot r@ c! swap 1+ swap r> r> 1+
   tuck type vtleft ;

: __K-DELETE  ( r: a u | ur i )
   __k-insdel -rot swap move swap 1- swap r> r> 1-
   tuck type space 1+ vtleft ;

: __K-FKEYS  \ ( r: a u d: ur i k -- r: a u d: ur i k f | ur i t ) handle fkeys
   ekey>fkey ~IF false EXIT THEN 
   CASE
     k-left   OF ^IF 1- 1 vtleft THEN true ENDOF
	 k-right  OF dup pluck < IF 1+ 1 vtright THEN true ENDOF
	 k-home   OF ?dup IF vtleft 0 THEN true ENDOF
	 k-end    OF 2dup - ?dup IF vtright drop dup THEN true ENDOF
	 k-insert OF 2dup > pluck r@ < and IF bl __k-insert THEN true ENDOF
	 k-delete OF 2dup > pluck and IF __k-delete THEN true ENDOF
	 k-up     OF __k-i @ 0>
	             IF __k-act 128 - c@ IF __k-i decr __k-get THEN
				 THEN true ENDOF
	 k-down   OF __k-i @ 8 <
	             IF __k-i incr __k-i @ 8 < IF __k-get ELSE __k-reset dup THEN
				 THEN true ENDOF      
     false dup
   ENDCASE ;

: __K-ADJ-HIST  ( r: a u | ur -- r: a u | ur )
   1 rpick over s" bye" str= over 0= or IF EXIT THEN
   __k-hist 128 + __k-hist 896 move __k-last 128 erase
   1 rpick over 126 min __k-last _place 
   __k-upd @ IF 8 __k-i ! ELSE __k-i @ 0<> __k-i +! THEN ;
   
: __FCACCEPT \ ( a u -- ur ) 6.1.0695 accept line from keyboard
   vt @ ~IF deferred accept EXIT THEN 2>r 0 0 __k-upd off
   BEGIN ekey dup 13 <>  ( r: a u | ur i k f )
   WHILE __k-fkeys IF CONTINUE THEN
     CASE 3 OF ( ^c ) -28 throw ENDOF
         27 OF ( esc ) __k-reset rdrop rdrop EXIT ENDOF
          8 OF ( bs ) ^IF 1- 1 vtleft __k-delete THEN ENDOF
         pluck r@ = IF drop ELSE __k-insert 1+ 1 vtright THEN true		
     ENDCASE
   REPEAT drop over swap - vtright  ( r: a u | ur )
   __k-adj-hist dup r> < IF dup r> + 0 swap c! ELSE rdrop THEN ;
IS ACCEPT

\ ------ OS Arguments --------------------------------------------------------

: ARGC  \ ( -- u ) MF number of arguments
C  mferr(mfout(1));
C  mfpush(mfargc); ;

: ARGV  \ ( u -- a u ) MF get argument string
C  mferr(mfin(1);mfout(1));
C  mfUCell u=mftos; 
C  if (u>=(mfUCell)mfargc) { mfpush(0); return; } 
C  mftos=(mfCell)(mfargv[u]), mfpush(strlen(mfargv[u])); ;
  
: SYSTEM  \ ( a u -- retval ) MF pass command to an OS sub-shell
C  char cmd[MFIB]; int u=mfpop(); char *a=(char*)mftos;
C  u=max(0,min(u,MFIB-1)); strncpy(cmd,a,u), cmd[u]=0;
   cr
C  mftos=(system(cmd)?errno:0); ;

: DIR  \ ( -- ) MF display working directory
C #if defined __linux__
   cr s" ls --group-directories-first"
C #else
   s" dir /w /ogn"
C #endif
   system drop ;
C
C #ifdef __clang__
C #define chdir(x) _chdir(x)
C #endif

: CHDIR  \ ( <dir> -- ) MF change working directory 
   parse-name
C  char mfib[MFIB]; int u=mfpop(); char *a=(char*)mfpop(); u=min(u,MFIB-1);
C  strncpy(mfib,a,u), mfib[u]=0;
C  chdir(mfib); ;   ;

: SYSEXIT  \ ( xc -- ) MF return to OS with exit code
C  int xc=mftos;
C  mfexit(), exit(xc); ;

\ ------ Startup Commands ----------------------------------------------------

: __RESIZE-STACK  \ ( u -- ) MF resize datastack
C  mfCell *s; mfUCell d=mfsp-mfstk, u=mfpop();
C  s=realloc(mfstk,u*MFSIZE); if (!s) return;
C  mfstksize=u, mfstk=s, mfsp=s+d, mflp=s+u; ;

: __RESIZE-RSTACK  \ ( u -- ) MF resize returnstack
C  mfCell *r; mfUCell d=mfrp-mfrst, u=mfpop();
C  r=realloc(mfrst,u*MFSIZE); if (!r) return;
C  mfrstsize=u, mfrst=r, mfrp=r+d; ;

: __RESIZE-FPSTACK  \ ( u -- ) MF resize floating-point stack
C  mfFlt *f; mfUCell d=mffp-mffst, u=mfpop();
C  f=realloc(mffst,u*MFSIZE*MFFLTSIZE); if (!f) return;
C  mffstsize=u, mffst=f, mffp=f+d; ;

DEFER: _STACKS  \ ( -- rpmax fpmax spmax ) MF max. stack sizes
C  mfpush(mffstsize), mfpush(mfrstsize), mfpush(mfstksize);
   s" Stacks: d:%d / r:%d / f:%d" printf ;

: __EVALCMDLINE  \ ( -- ) MF evaluate command-line arguments
   argc FOR n ~IF CONTINUE THEN n argv 
   2dup s" /e" str= IF 2drop 1 +n n argc <
     IF n argv evaluate THEN ELSE
   2dup s" /i" str= IF 2drop 1 +n n argc <
     IF n argv included THEN ELSE   
   2dup s" /s" str= IF 2drop 1 +n n argc <
	 IF n argv _number? IF __resize-stack ELSE -24 throw THEN THEN ELSE
   2dup s" /r" str= IF 2drop 1 +n n argc <
	 IF n argv _number? IF __resize-rstack ELSE -24 throw THEN THEN ELSE  
   2dup s" /f" str= IF 2drop 1 +n n argc <
	 IF n argv _number? IF __resize-fpstack ELSE -24 throw THEN THEN ELSE
   2dup s" /nl" str= IF 2drop __nologo on ELSE 	 
   2drop ." ?? invalid argument\007\n" exit THEN THEN THEN THEN THEN THEN NEXT ;

\ ------ System Integration --------------------------------------------------

: __FCSTART  \ ( -- ) MF evaluate command line and autoexec.mf
   __evalcmdline 
   s" autoexec.mf" 2dup exist-file IF included ELSE 2drop THEN ;
IS _START

: __FCLOGO
   __nologo @ IF EXIT THEN vt @ ~IF deferred _logo EXIT THEN
C #if defined __DJGPP__
   ." \033[37m+--------------------------+"
     ." \n| \033[31mM\033[37min\033[31mF\033[37morth V3.4.8 - "
     8 cells . ." bit |"
     ." \n+--------------------------+\n"
C #else
   ." \033[97m\033(0lqqqqqqqqqqqqqqqqqqqqqqqqqqk"
   ." \nx \033(B\033[91mM\033[97min\033[91mF\033[97morth V3.4.8 - "
   8 cells . ." bit \033(0x\033(B"
   ." \n\033(0mqqqqqqqqqqqqqqqqqqqqqqqqqqj\033(B\n"
C #endif
   vtbright vtgreen 
   _stacks ." \nDataspace: " i" mfpush(MFDSPSIZE);" ,.
   vtnormal ;
IS _LOGO

: __FCENVIRONMENT  \ ( a u -- a u | x.. t ) MF extend environment query
   2dup s" FACILITY" str= IF 2drop true true EXIT THEN
   2dup s" FACILITY-EXT" str= IF 2drop true true EXIT THEN
   deferred _environment? ;
IS _ENVIRONMENT?

[DEFINED] OPEN-FILE [IF]

: __FCBYE
   s" mfhist.blk" r/w bin create-file ~IF
    __k-hist 1024 pluck write-file drop close-file    
   THEN drop deferred bye ;
IS BYE

: __FCBOOT
   s" mfhist.blk" r/o bin open-file ~IF
     __k-hist 1024 pluck read-file 2drop close-file
   THEN drop deferred _boot ;
IS _BOOT

[THEN]
